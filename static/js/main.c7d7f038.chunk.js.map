{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["yaml","require","App","React","useState","isOpen","setIsOpen","content","setContent","formData","setFormData","cpus","widgets","SelectWidget","props","id","className","classNamePrefix","options","enumOptions","placeholder","label","isSearchable","onChange","e","a","value","hideModal","onSubmit","safeDump","skipInvalid","forceUpdate","setValue","console","log","useForceUpdate","fetch","headers","Accept","then","response","json","schema","render","liveValidate","fd","cpu","model","cores","mhz","document","getElementById","Navbar","bg","variant","Brand","href","Nav","Link","Modal","show","onHide","Header","Title","Body","Footer","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"yvTAQMA,EAAOC,EAAQ,KAmHNC,MAjHf,WAQE,MAA4BC,IAAMC,UAAS,GAA3C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BH,IAAMC,SAAS,oBAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCL,IAAMC,WAAtC,mBAAOK,EAAP,KAAiBC,EAAjB,KAGMC,EAAOV,EAAQ,KAkBfW,EAAU,CACdC,aAlBmB,SAAUC,GAC7B,OACE,cAAC,IAAD,CACEC,GAAG,QACHC,UAAU,eACVC,gBAAgB,SAEhBC,QAASJ,EAAMI,QAAQC,YACvBC,YAAaN,EAAMO,MACnBC,cAAc,EAEdC,SAAQ,uCAAE,WAAOC,GAAP,SAAAC,EAAA,sEACFX,EAAMS,SAASC,EAAEE,OADf,2CAAF,0DAcRC,EAAY,WAChBrB,GAAU,IAGNsB,EAAW,SAAC,EAAcJ,GAAO,IAAnBf,EAAkB,EAAlBA,SAClBC,EAAYD,GACZD,EAAWR,EAAK6B,SAASpB,EAAU,CAAEqB,aAAa,KATlDxB,GAAU,IAYNyB,EA9CN,WACE,MAA0B5B,IAAMC,SAAS,GAAzC,mBAAOsB,EAAP,KAAcM,EAAd,KAGA,OAFAC,QAAQC,IAAIR,GAEL,kBAAMM,GAAS,SAAAN,GAAK,OAAIA,EAAQ,MA0CrBS,GAoCpB,OAnCAC,MAAM,cAAe,CACnBC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAGTC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,iBACE,mCACE,cAAC,IAAD,CAEED,OAAQA,EACRd,SAAUA,EACVgB,cAAc,EACdnC,SAAUA,EACVG,QAASA,EACTW,SAAQ,uCAAE,WAAOC,GAAP,iBAAAC,EAAA,uDAEJoB,EAAKrB,EAAEf,UACLqC,IAAIC,QACJA,EAAQF,EAAGC,IAAIC,MAEnBF,EAAGC,IAAH,MAAkBnC,EAAKoC,GAAOC,MAC9BH,EAAGC,IAAH,IAAgBnC,EAAKoC,GAAOE,KAE9BvC,EAAYmC,GACZZ,QAAQC,IAAIW,EAAIrB,EAAEf,UAClBsB,IAXQ,2CAAF,uDANHtB,KAqBTyC,SAASC,eAAe,YAI5B,qCACE,eAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,QAAQ,OAA7B,UACE,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,QAAnB,iCACA,eAACC,EAAA,EAAD,CAAKzC,UAAU,UAAf,UACE,cAACyC,EAAA,EAAIC,KAAL,CAAUF,KAAK,oDAAf,yBAGA,cAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,kBAAf,0BAGJ,qBAAKzC,GAAG,OAAR,SACE,sDAEF,eAAC4C,EAAA,EAAD,CAAOC,KAAMvD,EAAQwD,OAAQlC,EAA7B,UACE,cAACgC,EAAA,EAAMG,OAAP,UACE,cAACH,EAAA,EAAMI,MAAP,8CAEF,cAACJ,EAAA,EAAMK,KAAP,UACE,8BAAMzD,MAER,eAACoD,EAAA,EAAMM,OAAP,WACE,wBAAQC,QAASvC,EAAjB,oBADF,IAC8C,sDCxGvCwC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAShC,OACP,cAAC,IAAMiC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.c7d7f038.chunk.js","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport Form from \"@rjsf/bootstrap-4\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Select from \"react-select\";\n\nconst yaml = require(\"js-yaml\");\n\nfunction App() {\n\n  function useForceUpdate(){\n    const [value, setValue] = React.useState(0);\n    console.log(value);\n   \n    return () => setValue(value => value + 1); \n}\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [content, setContent] = React.useState(\"Transitioning...\");\n  const [formData, setFormData] = React.useState();\n\n\n  const cpus = require(\"./cpus.json\")\n  const CustomSelect = function (props) {\n    return (\n      <Select\n        id=\"input\"\n        className=\"basic-single\"\n        classNamePrefix=\"select\"\n      \n        options={props.options.enumOptions}\n        placeholder={props.label}\n        isSearchable={true}\n        \n        onChange={async (e) => {\n          await props.onChange(e.value);\n        }}\n      ></Select>\n    );\n  };\n  const widgets = {\n    SelectWidget: CustomSelect,\n  };\n\n  const showModal = () => {\n    setIsOpen(true);\n  };\n\n  const hideModal = () => {\n    setIsOpen(false);\n  };\n\n  const onSubmit = ({ formData }, e) => {\n    setFormData(formData);\n    setContent(yaml.safeDump(formData, { skipInvalid: true }));\n    showModal();\n  };\n  const forceUpdate = useForceUpdate();\n  fetch(\"schema.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  })\n    .then((response) => response.json())\n    .then((schema) => {\n      render(\n        <>\n          <Form\n            key={formData}\n            schema={schema}\n            onSubmit={onSubmit}\n            liveValidate={true}\n            formData={formData}\n            widgets={widgets}\n            onChange={async (e) => {\n              \n              var fd = e.formData\n              if(fd.cpu.model){\n                var model = fd.cpu.model\n                \n                fd.cpu[\"cores\"] = cpus[model].cores\n                fd.cpu[\"mhz\"] = cpus[model].mhz\n              }\n              setFormData(fd);\n              console.log(fd, e.formData)\n              forceUpdate()\n            }}\n          />\n        </>,\n        document.getElementById(\"form\")\n      );\n    });\n  return (\n    <>\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">OpenWrt Device Form</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"https://github.com/aparcar/devices/tree/main/form\">\n            Source Code\n          </Nav.Link>\n          <Nav.Link href=\"schema_doc.html\">Schema</Nav.Link>\n        </Nav>\n      </Navbar>\n      <div id=\"form\">\n        <p> Loading schemas...</p>\n      </div>\n      <Modal show={isOpen} onHide={hideModal}>\n        <Modal.Header>\n          <Modal.Title>Device hardware configuration</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <pre>{content}</pre>\n        </Modal.Body>\n        <Modal.Footer>\n          <button onClick={hideModal}>Cancel</button> <button> Save </button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}